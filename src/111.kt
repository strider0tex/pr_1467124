import kotlin.random.Random

fun main() {
    println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ë—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã'!")
    println("–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥–∞–ª 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ —Å –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Ü–∏—Ñ—Ä–∞–º–∏.")
    println("–ß–∏—Å–ª–æ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω—É–ª—è!")
    println("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–≥–∞–¥–∫—É (4 —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π):")

    val secretNumber = generateSecretNumber()
    var attempts = 0

    while (true) {
        attempts++
        print("–ü–æ–ø—ã—Ç–∫–∞ $attempts: ")
        val guess = readlnOrNull()?.trim()

        if (guess == null || guess.length != 4) {
            println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã.")
            continue
        }

        if (!guess.all { it.isDigit() }) {
            println("–û—à–∏–±–∫–∞! –í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
            continue
        }

        if (guess.toSet().size != 4) {
            println("–û—à–∏–±–∫–∞! –¶–∏—Ñ—Ä—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.")
            continue
        }

        val result = checkGuess(secretNumber, guess)
        println("–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.bulls} –±—ã–∫(–æ–≤), ${result.cows} –∫–æ—Ä–æ–≤–∞(—ã)")

        if (result.bulls == 4) {
            println("\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ $secretNumber –∑–∞ $attempts –ø–æ–ø—ã—Ç–æ–∫!")
            break
        }
    }
}

fun generateSecretNumber(): String {
    val digits = mutableListOf('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')
    digits.shuffle()
    return digits.subList(0, 4).joinToString("")
}

fun checkGuess(secret: String, guess: String): GuessResult {
    var bulls = 0
    var cows = 0

    for (i in secret.indices) {
        if (secret[i] == guess[i]) {
            bulls++
        } else if (guess[i] in secret) {
            cows++
        }
    }

    return GuessResult(bulls, cows)
}

data class GuessResult(val bulls: Int, val cows: Int)